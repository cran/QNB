%\VignetteIndexEntry{An introduction to QNB}
%\VignetteDepends{}
%\VignetteKeywords{differential methylation}
%\VignettePackage{QNB}

\documentclass[]{article}
\usepackage{times}
\usepackage{hyperref}
\usepackage[pdftex]{graphicx}
\usepackage{cite}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\QNB}{\Rpackage{QNB}}
\newcommand{\bam}{\texttt{BAM}}


\title{An Introduction to \Rpackage{QNB}}
\author{Lian Liu <liulian19860905@163.com>}
\date{Modified: 6 Jul, 2017. Compiled: \today }

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

<<options,echo=FALSE>>=
options(width=60)
@ 

\section{Introduction}
As a newly emerged research area, RNA epigenetics has drawn increasing attention recently for the participation of RNA methylation and other modifications in a number of crucial biological processes. Thanks to high throughput sequencing techniques, such as m6A-Seq, transcriptome-wide RNA methylation profile is now available in the form of count-based data, with which it is often of interests to study the dynamics in epitranscriptomic layer. However, the sample size of RNA methylation experiment is usually very small due to its costs; and additionally, there usually exist a large number of genes whose methylation level cannot be accurately estimated due to their low expression level, making differential RNA methylation analysis a difficult task.
We present \Rpackage{QNB} R-package, a statistical approach for differential RNA methylation analysis with count-based small-sample sequencing data. The method is based on 4 independent negative binomial dis-tributions with their variances and means linked by local regressions. QNB showed improved performance on simulated and real m6A-Seq datasets when compared with competing algorithms. And the QNB model is also applicable to other datasets related RNA modifications, including but not limited to RNA bisulfite sequencing, m1A-Seq, Par-CLIP, RIP-Seq, etc. Please don't hesitate to contact <liulian19860905@163.com> if you have any problem. 
The inputs of the main function \Rfunction{qnbtest} are four reads count data frame for IP samples of two conditions and Input samples of two conditions.The \Rpackage{QNB} package fullfills the following one key function:
\begin{itemize}
  \item differential RNA methylation analysis for count-based small-sample sequencing data with a quad-negative binomial model
\end{itemize}

We will in the next see how the the main functions can be accomplished in a single command. 


\section{Input data}
As input, the \Rpackage{QNB} package expects count data from two conditions (e.\,g., treated and control) as obtained, e.\,g., from MeRIP-Seq, in the form of two rectangular tables of integer values for each condition, one is Input control sample and another is IP sample.
The table cell in the $i$-th row and the $j$-th column of the table shows the reads count of the methylation site $i$ in sample $j$.

The count values must be raw counts of sequencing reads. So, please do not supply other quantities, such as (rounded) normalized counts -- this will lead to nonsensical results.                                                                                                                                                                                                    

In this vignette, we will work with DAA dataset. The original DAA raw data in SRA format was obtained directly GEO (GSE48037), which consists of 3 IP and 3 Input MeRIP-Seq replicates obtained under wild type condition and after DAA treatment, respectively (a total of 12 libraries). The short sequencing reads are firstly aligned to human genome assembly hg19 with Tophat2\cite{Kim:2013}, and then get RNA N6-methyl-adenosine (m6A) sites using \Rpackage {exomePeak} R/Bioconductor package~\cite{Meng:2013} with UCSC gene annotation database~\cite{Karolchik:2014}. In the peak calling step, to obtain a consensus RNA methylation site set between two experimental conditions (wild type and DAA treatment), we merged 6 IP samples and 6 Input samples, respectively. Then we used Bioconductor packages on R platform to obtain the reads count matrix. In the matrix, it includes the reads counts of m6A methylation sites from IP and Input samples (each with 3 replicates) under two conditions. 

\section{Differential RNA Methylation Analysis}
The main function of \Rpackage{QNB} R-package is to analyse differential RNA methylation. Meths are the reads count matrix of IP samples from two conditions, and unmeths are Input control samples from two condition. To get the differential RNA methylation, we estimate the dispersion for each site between treated (including IP and Input control sample) and untreated (including IP and Input control sample). In addtion, IP and Input control samples must be the same replicates, but it is may be the different replicates under two conditons.

To estimate the dispersion, there are four ways how the empirical dispersion can be computed:

\begin{itemize}
\item pooled - Use the samples from all conditions with replicates to estimate a single pooled empirical dispersion value, called \texttt{"pooled"}, and assign it to all samples.
\item per-condition - For each condition with replicates, compute an empirical dispersion value by considering the data from samples for this condition. 
\item blind - Ignore the sample labels and compute an empirical dispersion value as if all samples were replicates of a single condition. This can be done even if there are no biological replicates. 
\item auto - Select mode according to the size of samples automatically. The default is auto. By default, QNB package implements the \texttt{"per-condition"} mode for a more sensitive estimation of the raw variance parameter when biological replicates are provided; while the \texttt{"blind"} mode is implemented when biological replicates are not available.


\textbf{Other parameters:}

\item size.factor - A list of size factor. 
The size factor of the IP and 
input sample of the biological replicate and directly reflect their
sequencing depth. 
If \Rcode{size.factor=NA}, \Rpackage{QNB} 
will compute the size factor of 
IP and input sample of each replicate. If user could provide the size factor, 
the names of each term must be \texttt{control\_ip, treated\_ip, control\_input, 
treated\_input} in list.


\item plot.dispersion - The default is TRUE. If \Rcode{plot.dispersion=FALSE}, it will not save the dispersion figure.

\item output.dir - The saved file path. The default is NA. If \Rcode{output.dir=NA}, the path is the current path.
\end{itemize}

Let us firstly load the package and get the toy data (came with the package) ready.
<<Input file>>=
library(QNB)
f1 = system.file("extdata", "control_ip.txt", package="QNB")
f2 = system.file("extdata", "treated_ip.txt", package="QNB")
f3 = system.file("extdata", "control_input.txt", package="QNB")
f4 = system.file("extdata", "treated_input.txt", package="QNB")

meth1 = read.table(f1, header=TRUE)
meth2 = read.table(f2, header=TRUE)
unmeth1 = read.table(f3, header=TRUE)
unmeth2 = read.table(f4, header=TRUE)
head(meth1)
head(unmeth1)
@


\subsection{Standard comparison between two experimental conditions}

When there are replicates under two conditions, we could select \texttt{mode="per-condition"}
or \texttt{mode="pooled"} to estimate the dispersion. The default is \texttt{auto}. By default, QNB package implements the "per-conditon" mode for a more sensitive estimation of the raw variance parameter when biological replicates are provided; while the "blind" mode is implemented when biological replicates are not available. If \texttt{mode="per-condition"}, we estimate one dispersion for each condition, respectively. 
If \texttt{mode="pooled"}, we combind all replicates to generate one dataset from control samples and IP samples, then estimate one dispersion for two conditions.

<<per-conditon>>=
result = qnbtest(meth1, meth2, unmeth1, unmeth2, mode="per-condition")
head(result)
@

The results will be saved in the specified output directory, 
including the dispersion figure(if \Rcode{plot.dispersion=TRUE)} 
and the result table 
(including 7 columns (p.treated, p.control, log2.RR, log2.OR, pvalue, q, padj)). 

\begin{itemize}
  \item p.treated - The percentage of methylation under treated condition.
  
  \item p.control - The percentage of methylation under control condition.
  
  \item log2.RR - The normalized risk ratio.
  
  \item log2.OR - The normalized odds ratio.
  
  \item pvalue - Indicate the significance of the methylation site as an RNA 
                 differential methylation site

  \item q - The standardized feature abundance, which is proportional to the expression                    
            level of the RNA transcript.
  
  \item padj - The FDR of the methylation site, indicating the significance of the peak   
               as an RNA differential methylation site after multiple hypothesis         
               correction usting BH method.  
    
\end{itemize}

In QNB, we compute size factor of IP and input samples using the 
``geometric'' approach developed for RNA-Seq data. 
If \texttt{size.factor=NA}, \Rpackage{QNB}  will compute size factor 
according to the samples which are provided, otherwise, user could 
provide the size factor according to their request. The format of size 
factor must be a list, and the name of each term must be 
\texttt{control\_ip, treated\_ip, control\_input, 
treated\_input} in list. 

<<provide size factor>>=
total_number_reads_control_ip <- c(3015921,2563976,198530)
total_number_reads_treated_ip <- c(1565101,152389,323569)
total_number_reads_control_input <- c(108561,302534,108123)
total_number_reads_treated_input <- c(301270,208549,308654)

standard_library_size <- exp(mean(log( c(total_number_reads_control_ip,
                                  total_number_reads_treated_ip,
                                  total_number_reads_control_input,
                                  total_number_reads_treated_input))))

size.factor <- list(control_ip = total_number_reads_control_ip/standard_library_size,
                   treated_ip = total_number_reads_treated_ip/standard_library_size,
                   control_input = 
                     total_number_reads_control_input/standard_library_size,
                   treated_input = 
                     total_number_reads_treated_input/standard_library_size)
                   
result <- qnbtest(meth1, meth2, unmeth1, unmeth2,
                 size.factor = size.factor)

@

\subsection{Comparison without replicates}
Proper replicates are essential to interpret a biological experiment. After all, any attempt to work without replicates will lead to conclusions of very limited reliability. But the \Rpackage{QNB} package can deal with them.

If you have replicates for one condition but not for the other, or without any replicates for two conditions, you can select \texttt{mode="blind"} to estimate the dispersion. We combind all samples under two conditions to generate replicates for two conditions. Then we estimate one dispersion for two conditions.


<<without replicates>>=
f1 = system.file("extdata", "no_rep_controlip.txt", package="QNB")
f2 = system.file("extdata", "no_rep_treatedip.txt", package="QNB")
f3 = system.file("extdata", "no_rep_controlinput.txt", package="QNB")
f4 = system.file("extdata", "no_rep_treatedinput.txt", package="QNB")

no_rep_meth1 = read.table(f1, header=TRUE)
no_rep_meth2 = read.table(f2, header=TRUE)
no_rep_unmeth1 = read.table(f3, header=TRUE)
no_rep_unmeth2 = read.table(f4, header=TRUE)
head(no_rep_meth1)
head(no_rep_unmeth1)
result = qnbtest(no_rep_meth1, 
                 no_rep_meth2,
                 no_rep_unmeth1,
                 no_rep_unmeth2,
                 mode="blind")
@



\subsection{Select mode automatically}

If you could not decide which mode to estimate dispersion, \texttt{mode="auto"} will select suitable way to estimate dispersion according to the replicates. By default, QNB package implements the "per-conditon" mode for a more sensitive estimation of the raw variance parameter when biological replicates are provided; while the "blind" mode is implemented when biological replicates are not available.

<<automatically>>=
result = qnbtest(meth1, meth2, unmeth1, unmeth2)
@

\subsection{The complete processing flow}

The following is the complete prossing, including peak calling using exomePeak R/Bioconductor package , get reads count and differential RNA methylation analysis.


<<The complete processing flow>>=
library(exomePeak)
library(QNB)
library(GenomicFeatures)
library(Rsamtools)

#peak calling using exomePeak
GENE_ANNO_GTF = system.file("extdata", "example.gtf", package="exomePeak")
f1 = system.file("extdata", "IP1.bam", package="exomePeak")
f2 = system.file("extdata", "IP2.bam", package="exomePeak")
f3 = system.file("extdata", "treated_IP1.bam", package="exomePeak")
IP_BAM = c(f1,f2,f3)
f4 = system.file("extdata", "Input1.bam", package="exomePeak")
f5 = system.file("extdata", "Input2.bam", package="exomePeak")
f6 = system.file("extdata", "treated_Input1.bam", package="exomePeak")
INPUT_BAM = c(f4,f5,f6)

res = exomepeak(GENE_ANNO_GTF=GENE_ANNO_GTF, IP_BAM=IP_BAM, INPUT_BAM=INPUT_BAM)



#get reads count
peak=res$all_peaks
untreated_ip=matrix(0,nrow=length(peak),ncol=2)
untreated_input=matrix(0,nrow=length(peak),ncol=2)
treated_ip=matrix(0,nrow=length(peak),ncol=1)
treated_input=matrix(0,nrow=length(peak),ncol=1)
txdb <- makeTxDbFromUCSC(genome="hg19")
exonRanges <- exonsBy(txdb, "tx")

#get ip reads count
#f1
aligns <- readGAlignments(f1)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f1, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
untreated_ip[,1] <- counts

#f2
aligns <- readGAlignments(f2)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f2, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
untreated_ip[,2] <- counts

#f3
aligns <- readGAlignments(f3)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f3, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
treated_ip[,1] <- counts

#f4
aligns <- readGAlignments(f4)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f4, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
untreated_input[,1] <- counts

#get input reads count
#f5
aligns <- readGAlignments(f5)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f5, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
untreated_input[,2] <- counts


#f6
aligns <- readGAlignments(f6)
para <- ScanBamParam(what="mapq")
mapq <- scanBam(f6, param=para)[[1]][[1]]
# filter reads with mapq smaller than 30. 
mapq[is.na(mapq)] <- 255  # Note: mapq "NA" means mapq = 255
ID_keep <- (mapq >30)
filtered <- aligns[ID_keep]
id <- countOverlaps(filtered,exonRanges)
transcriptome_filtered_aligns <- filtered[id>0]
counts <- countOverlaps(peak, transcriptome_filtered_aligns)
#counts <- countOverlaps(peak, filtered)
treated_input[,1] <- counts


#differential RNA methylation analysis
result = qnbtest(untreated_ip,treated_ip,untreated_input,treated_input)
@


\section{Session Information} 
<<session info>>=
sessionInfo()
@

\bibliographystyle{unsrt}
\bibliography{QNB}

\end{document}
